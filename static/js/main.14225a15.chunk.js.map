{"version":3,"sources":["helpers/debounce.ts","helpers/api.ts","store/filterField.ts","store/message.ts","store/users.ts","store/posts.ts","store/comments.ts","store/filteredPosts.ts","store/index.ts","components/User.tsx","components/Comments.tsx","components/Post.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["timing","baseURL","reducer","filterField","action","type","message","LOADING_FINISH","users","posts","comments","filteredPosts","filter","post","body","includes","title","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","User","id","user","useSelector","state","address","street","city","suite","name","email","Comments","postId","comment","className","map","key","Post","userId","PostList","dispatch","useDispatch","useState","filterFieldValue","setFilterFieldValue","useEffect","funk","delay","filterFieldChange","clearTimeout","setTimeout","length","value","onChange","event","target","onClick","setMessage","Promise","all","fetch","then","responce","json","loadingFinish","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14225a15.chunk.js","sourcesContent":["\nlet timing: number\n\nexport const debounce = (funk: (filterField: string) => void, delay: number) => {\n  clearTimeout(timing);\n  timing = setTimeout(funk, delay)\n}\n","\nconst baseURL = \"https://mate-academy.github.io/react_dynamic-list-of-posts/api/\"\n\nexport const getPosts = () => {\n  return fetch(baseURL + \"posts.json\")\n    .then(responce => responce.json())\n    .then(posts => posts)\n}\nexport const getUsers = () => {\n  return fetch(baseURL + \"users.json\")\n    .then(responce => responce.json())\n    .then(users => users)\n}\nexport const getComments = () => {\n  return fetch(baseURL + \"comments.json\")\n    .then(responce => responce.json())\n    .then(comments => comments)\n}\n\nexport const getAllData = () => {\n  return Promise.all([getPosts(), getUsers(), getComments()])\n}\n","import { AnyAction } from 'redux';\nimport { PostType } from '../types';\n\n// Action types\nexport const FILTER_FIELD_CHANGE = 'FILTER_FIELD_CHANGE';\n\n// Action creators\nexport const filterFieldChange = (filterField: string, posts: PostType[]) => ({ type: FILTER_FIELD_CHANGE, filterField, posts });\n\nconst reducer = (filterField = \"\", action: AnyAction) => {\n  switch (action.type) {\n    case FILTER_FIELD_CHANGE:\n      return action.filterField;\n    default:\n      return filterField;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { LOADING_FINISH } from './index';\n\n// Action types\nexport const SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = 'Press to load', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n    case LOADING_FINISH:\n      return action.message;\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { UserType } from '../types';\nimport { LOADING_FINISH } from './index';\n\n// Action types\nexport const SET_USERS = 'SET_USERS';\n\n// Action creators\nexport const setUsers = (users: UserType[]) => ({ type: SET_USERS, users });\n\nconst reducer = (users = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERS:\n    case LOADING_FINISH:\n      return action.users;\n    default:\n      return users;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { PostType } from '../types';\nimport { LOADING_FINISH } from '.';\n\n// Action types\nexport const SET_POSTS = 'SET_POSTS';\n\n// Action creators\nexport const setPosts = (posts: PostType[]) => ({ type: SET_POSTS, posts });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n    case LOADING_FINISH:\n      return action.posts;\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { CommentType } from '../types';\nimport { LOADING_FINISH } from '.';\n\n// Action types\nexport const SET_COMMENTS = 'SET_COMMENTS';\n\n// Action creators\nexport const setComments = (comments: CommentType[]) => ({\n  type: SET_COMMENTS,\n  comments\n});\n\nconst reducer = (comments = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n    case LOADING_FINISH:\n      return action.comments;\n    default:\n      return comments;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { FILTER_FIELD_CHANGE } from './filterField';\nimport { LOADING_FINISH } from '.';\nimport { PostType } from '../types';\n\n\n\nconst reducer = (filteredPosts: PostType[] = [], action: AnyAction): PostType[] => {\n  switch (action.type) {\n    case FILTER_FIELD_CHANGE:\n      if (action.filterField === '') {\n        return [...action.posts];\n      } else {\n        return action.posts.filter((post: PostType) => post.body.includes(action.filterField)\n          || post.title.includes(action.filterField));\n      };\n    case LOADING_FINISH:\n      return [...action.posts]\n    default:\n      return filteredPosts;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport message from './message';\nimport users from './users';\nimport posts from './posts';\nimport comments from './comments';\nimport filterField from './filterField';\nimport filteredPosts from './filteredPosts';\nimport { LoadingFinishProps } from '../types';\n\nexport const LOADING_FINISH = 'LOADING_FINISH';\n\nexport const loadingFinish = ({ users, comments, posts, message }: LoadingFinishProps) =>\n  ({ type: LOADING_FINISH, users, comments, posts, message })\n\nconst rootReducer = combineReducers({\n  message,\n  users,\n  comments,\n  posts,\n  filterField,\n  filteredPosts,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst initialState = {\n  message: 'Press for start loading',\n  users: [],\n  comments: [],\n  posts: [],\n  filterField: '',\n  filteredPosts: [],\n}\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","\nimport React from 'react';\nimport { UserType } from '../types';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store';\n\ntype PropsType = {\n  id: number;\n}\n\nexport const User: React.FC<PropsType> = ({ id }) => {\n  const user = useSelector(\n    (state: RootState) => state\n      .users\n      .filter((user: UserType) => user.id === id)[0])\n  const { street, city, suite } = user.address;\n  const { name, email } = user;\n\n  return (\n    <div>\n      <span>\n        <strong> Name: </strong>\n        {name}\n      </span>\n      <span>\n        <strong> Email: </strong>\n        {email}\n      </span>\n      <span>\n        <strong> Address: </strong>\n        {city}, {street}, {suite}\n      </span>\n    </div>\n  )\n}\n","import './Comments.scss';\nimport React from 'react';\nimport { CommentType } from '../types';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store';\n\ntype PropsType = {\n  postId: number;\n}\n\nexport const Comments: React.FC<PropsType> = ({ postId }) => {\n  const comments = useSelector(\n    (state:RootState) => state\n    .comments\n    .filter((comment: CommentType) => comment.postId === postId)\n  )\n\n  return (\n    <ul className=\"Comments\">\n      {comments.map((comment: CommentType) => {\n        return (\n          <li\n            key={comment.name + comment.body}\n            className=\"Comments__item\">\n            <p><strong>Name: </strong>{comment.name}</p>\n            <p><strong>Comment: </strong>{comment.body}</p>\n            <p><strong>Email: </strong>{comment.email}</p>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n","import React from 'react';\nimport { PostType } from '../types';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store'\nimport { User } from './User';\nimport { Comments } from './Comments';\n\ntype PropsType = {\n  id:number\n}\n\nexport const Post: React.FC<PropsType> = ({ id }:{id: number}) => {\n  const {title, body, userId} = useSelector(\n    (state:RootState) => state\n    .filteredPosts\n    .filter((post:PostType) => post.id === id)[0])\n\n  return (\n    <div className=\"Post\">\n      <h1>{title}</h1>\n      <p>{body}</p>\n      <User  id={userId}/>\n      <Comments postId={id}  />\n    </div>\n  )\n}\n","\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport { getAllData } from '../helpers/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostType } from '../types';\nimport { debounce } from '../helpers/debounce';\nimport { filterFieldChange } from '../store/filterField';\nimport { RootState, loadingFinish } from '../store';\nimport { Post } from './Post';\nimport { setMessage } from '../store/message';\n\nconst PostList = () => {\n  const dispatch = useDispatch();\n  const message = useSelector((state: RootState) => state.message);\n  const filteredPosts = useSelector((state: RootState) => state.filteredPosts);\n  const posts = useSelector((state:RootState) => state.posts);\n  const [filterFieldValue, setFilterFieldValue] = useState('')\n\n  const handleButtonClick = () => {\n    dispatch(setMessage('Loading....'))\n    getAllData().then(([posts, users, comments]) => {\n      const message = 'Loaded';\n    dispatch(loadingFinish({posts, users, comments, message}))\n    })\n  }\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFilterFieldValue(event.target.value);\n  }\n\n  useEffect(() => {\n    debounce(() => {\n         dispatch(filterFieldChange(filterFieldValue, posts));\n     },\n      1000)\n  }, [filterFieldValue, dispatch, posts])\n\n  return (\n    <div>\n      {filteredPosts.length !== 0\n        ? (<>\n          <span>For filtering: </span>\n          <input\n            type=\"text\"\n            value={filterFieldValue}\n            onChange={handleInputChange}\n          />\n          <ul>\n            {filteredPosts.map((post: PostType) => {\n              return (\n                <li key={post.id}>\n                  <Post id={post.id} />\n                </li>\n              )\n            })}\n          </ul>\n        </>)\n        : <button\n          onClick={handleButtonClick}\n        >\n          {message}\n        </button>}\n    </div>\n  )\n}\n\nexport default PostList;\n","import React from 'react';\nimport './App.scss';\nimport PostList from './components/PostList';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <PostList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}