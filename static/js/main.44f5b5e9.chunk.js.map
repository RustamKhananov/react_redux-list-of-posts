{"version":3,"sources":["helpers/api.ts","helpers/debounce.ts","store/comments.ts","store/users.ts","store/posts.ts","store/message.ts","components/User.tsx","components/Comments.tsx","components/Post.tsx","store/filterField.ts","store/filteredPosts.ts","components/PostList.tsx","App.tsx","store/loading.ts","store/index.ts","index.tsx"],"names":["timing","reducer","comments","action","type","users","posts","message","User","name","email","address","street","city","suite","Comments","className","map","comment","key","body","Post","post","user","useSelector","state","find","id","userId","filter","postId","title","filterField","filteredPosts","connect","dispatch","setUsers","setComments","setPosts","setMessage","setFilterField","setFilterFieldCreator","setFilteredPosts","setFilteredPostsCreator","value","onChange","event","funk","delay","target","includes","clearTimeout","setTimeout","onClick","Promise","all","fetch","then","responce","json","App","loading","rootReducer","combineReducers","loadingReducer","messageReducer","usersReducer","commentsReducer","postsReducer","filterFieldReducer","filteredPostsReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44f5b5e9.chunk.js","sourcesContent":["\n\nexport function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n\nexport const getPosts = () => {\n  return fetch(\"https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json\")\n  .then(responce => responce.json())\n  .then(posts => posts)\n}\nexport const getUsers = () => {\n  return fetch(\"https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json\")\n  .then(responce => responce.json())\n  .then(users => users)\n}\nexport const getComments = () => {\n  return fetch(\"https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json\")\n  .then(responce => responce.json())\n  .then(comments => comments)\n}\n\nexport const getAllData = () => {\n return Promise.all([getPosts(), getUsers(), getComments()])\n}\n","\nlet timing:number\n\n\n\nexport const debounce = (funk: (filterField: string) => void, delay: number) => {\n  clearTimeout(timing);\n\n\n  timing = setTimeout(funk, delay)\n}\n\n","import { AnyAction } from 'redux';\nimport { CommentType } from '../types';\n\n// Action types\nexport const SET_COMMENTS = 'SET_COMMENTS';\n\n\n// Action creators\nexport const setCommentsCreator = (comments: CommentType[]) => ({ type: SET_COMMENTS, comments});\n\n\n//selectors ?\n\n\nconst reducer = (comments = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return action.comments;\n\n    default:\n      return comments;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { UserType } from '../types';\n\n// Action types\nexport const SET_USERS = 'SET_USERS';\n\n\n// Action creators\nexport const setUsersCreator = (users: UserType[]) => ({ type: SET_USERS, users});\n\n\n//selectors ?\n\n\nconst reducer = (users = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERS:\n      return action.users;\n\n    default:\n      return users;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { PostType} from '../types';\n\n// Action types\nexport const SET_POSTS = 'SET_POSTS';\n\n\n// Action creators\nexport const setPostsCreator = (posts: PostType[]) => ({ type: SET_POSTS, posts});\n\n\n//selectors ?\n\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nexport const SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","\nimport React from 'react';\nimport { AddressType } from '../types';\n\ntype PropsType = {\n  name: string;\n  email: string;\n  address: AddressType;\n}\n\n\nexport const User: React.FC<PropsType> = ({ name, email, address }) => {\n  const {street, city, suite} = address;\n\n  return (\n    <div>\n      <span><strong> Name: </strong>{name}</span>\n      <span><strong> Email: </strong>{email}</span>\n  <span> <strong> Address: </strong>{city}, {street}, {suite}</span>\n    </div>\n  )\n}\n\n","import './Comments.scss';\nimport React from 'react';\nimport { CommentType } from '../types';\n\ntype PropsType = {\n  comments: CommentType[]\n}\n\n\nexport const Comments: React.FC<PropsType> = ({ comments }) => {\n  return (\n    <ul className=\"Comments\">\n      {comments.map((comment: CommentType) => {\n        return (\n          <li\n          key={comment.name + comment.body}\n          className=\"Comments__item\">\n            <p><strong>Name: </strong>{comment.name}</p>\n            <p><strong>Comment: </strong>{comment.body}</p>\n            <p><strong>Email: </strong>{comment.email}</p>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\n\n","import React from 'react';\nimport { PostType, UserType, CommentType } from '../types';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store'\nimport { User } from './User';\nimport { Comments } from './Comments';\n\n\ntype PropsType = {\n  post: PostType;\n}\n\nexport const Post: React.FC<PropsType> = ({ post }) => {\n  const user = useSelector(\n    (state: RootState) => state\n      .users\n      .find((user: UserType) => user.id === post.userId));\n\n  const comments = useSelector(\n    (state: RootState) => state\n      .comments\n      .filter((comment: CommentType) => comment.postId === post.id)\n  )\n\n  return (\n    <div className=\"Post\">\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n      <User name={user.name} email={user.email} address={user.address} />\n      <Comments comments={comments} />\n    </div>\n  )\n}\n\n\n\n","import { AnyAction } from 'redux';\n\n// Action types\nexport const SET_FILTER_FIELD = 'SET_FILTER_FIELD';\n\n\n// Action creators\nexport const setFilterFieldCreator = (filterField: string) => ({ type: SET_FILTER_FIELD, filterField});\n\n\n//selectors ?\n\n\nconst reducer = (filterField = \"\", action: AnyAction) => {\n  switch (action.type) {\n    case SET_FILTER_FIELD:\n      return action.filterField;\n\n    default:\n      return filterField;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { PostType } from '../types';\n\n// Action types\nexport const SET_FILTERED_POSTS = 'SET_FILTERED_POSTS';\n\n\n// Action creators\nexport const setFilteredPostsCreator = (filteredPosts: PostType[]) => ({ type: SET_FILTERED_POSTS, filteredPosts});\n\n\n//selectors ?\n\n\nconst reducer = (filteredPosts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_FILTERED_POSTS:\n      return action.filteredPosts;\n\n    default:\n      return filteredPosts;\n  }\n};\n\nexport default reducer;\n","\nimport React, { ChangeEvent } from 'react';\nimport { getAllData } from '../helpers/api';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { UserType, PostType, CommentType } from '../types';\nimport { SET_COMMENTS } from '../store/comments';\nimport { SET_USERS } from '../store/users';\nimport { SET_POSTS } from '../store/posts';\nimport { RootState } from '../store';\nimport { SET_MESSAGE } from '../store/message';\nimport { Post } from './Post';\nimport { setFilterFieldCreator } from '../store/filterField';\nimport { setFilteredPostsCreator } from '../store/filteredPosts';\nimport { debounce } from '../helpers/debounce';\n\n\n\n\ntype PropsType = {\n  setMessage: (message: string) => void;\n  setUsers: (users: UserType[]) => void;\n  setComments: (comments: CommentType[]) => void;\n  setPosts: (posts: PostType[]) => void;\n  message: string;\n  posts: PostType[];\n  filterField: string;\n  setFilterField: (filterField: string) => void;\n  setFilteredPosts: (filteredPosts: PostType[]) => void;\n  filteredPosts: PostType[],\n}\n\nconst PostList = ({\n  setMessage,\n  setComments,\n  setPosts,\n  setUsers,\n  message,\n  posts,\n  filterField,\n  setFilterField,\n  filteredPosts,\n  setFilteredPosts,\n}: PropsType) => {\n\n  const handleButtonClick = () => {\n    setMessage('Is loading');\n    getAllData().then(([posts, users, comments]) => {\n      setComments(comments);\n      setPosts(posts);\n      setFilteredPosts(posts)\n      setUsers(users);\n      setMessage('Loaded')\n    })\n  }\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFilterField(event.target.value);\n    debounce(() => {\n      setFilteredPosts(posts.filter(\n        (post: PostType) => post.body.includes(filterField)\n          || post.title.includes(filterField)))\n    },\n      1000)\n  }\n\n\n\n  return (\n    <div>\n\n\n\n      {message === 'Loaded'\n        ? (<>\n          <span>For filtering: </span>\n          <input\n            type=\"text\"\n            value={filterField}\n            onChange={handleInputChange}\n          />\n          <ul>\n            {filteredPosts.map((post: PostType) => {\n              return (\n                <li key={post.id}>\n                  <Post post={post} />\n                </li>\n\n              )\n            })}\n          </ul>\n\n        </>)\n        : <button\n          onClick={handleButtonClick}\n        >\n          {message}\n        </button>}\n    </div>\n  )\n}\n\nconst mapState = (state: RootState) => ({\n  message: state.message,\n  posts: state.posts,\n  filterField: state.filterField,\n  filteredPosts: state.filteredPosts,\n\n\n})\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  setUsers: (users: UserType[]) => dispatch({ type: SET_USERS, users }),\n  setComments: (comments: CommentType[]) => dispatch({ type: SET_COMMENTS, comments }),\n  setPosts: (posts: PostType[]) => dispatch({ type: SET_POSTS, posts }),\n  setMessage: (message: string) => dispatch({ type: SET_MESSAGE, message }),\n  setFilterField: (filterField: string) => dispatch(setFilterFieldCreator(filterField)),\n  setFilteredPosts: (filteredPosts: PostType[]) => dispatch(setFilteredPostsCreator(filteredPosts))\n})\n\n\n\n\nexport default connect(mapState, mapDispatch)(PostList)\n\n","import React from 'react';\nimport './App.scss';\nimport PostList from './components/PostList';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <PostList />\n\n    </div>\n  );\n};\n\nexport default App;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport usersReducer from './users';\nimport postsReducer from './posts';\nimport commentsReducer from './comments';\nimport { fetchMessage } from '../helpers/api';\nimport filterFieldReducer from './filterField';\nimport filteredPostsReducer from './filteredPosts';\n\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  users: usersReducer,\n  comments: commentsReducer,\n  posts: postsReducer,\n  filterField: filterFieldReducer,\n  filteredPosts: filteredPostsReducer,\n\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getUsers = (state: RootState) => state.users;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getComments = (state: RootState) => state.comments;\nexport const getFilteredPostss = (state: RootState) => state.filteredPosts;\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const message = await fetchMessage();\n\n      dispatch(setMessage(message));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\n\nconst initialState = {\n  message: 'Press to load',\n  loading: false,\n  posts: [],\n  users: [],\n  comments: [],\n}\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}